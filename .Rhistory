a<-available.packages()
a<-available.packages()
head(rownames(a), 3)
head(rownames(a), 100)
install.packages("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth")
library(KernSmooth)
library("KernSmooth"")
""
library("KernSmooth")
install.packages("swirl")
installed.packages("curl")
install.packages("curl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
sqrt(z) - 1
my_sqrt <- sqrt(z) - 1
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1:4) + c(0,10,100)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testedir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
info()
dir.create(file.path("folder1", "folder2"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times  = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
q()
x <- 1:4
lapply(x,runif)
runif()
runif(5, 1, 3)
runif(10)
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a, c(1,2), mean)
rowMeans(a, dims = 2)
str(mapply)
str(split)
x <- c(rnorm(10, runif(10), rnorm(10,1)))
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
split(x,f)
?split
x
gl(10)
?gl
gl(3,10)
?split
lapply(split(x,f), mean)
?lapply
f
f(3)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
printmessage <- function(x){
if(x>0)
print('x is greater than zero')
else()
printmessage <- function(x){
if(x>0) print ('x is greater than zero')
else print('x is less than or equal to zero')
invisible(x)
}
printmessage(1)
printmessage(0)
printmessage(NA)
traceback()
?traceback
install.packages(c("digest", "jsonlite", "openssl"))
?recover
mean(y)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y-x)
library('swirl')
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,4,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals(flag_shapes, unique)
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?C
?C
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c('Bill', 'Gina', 'Kelly', 'Sean')
cbind(patients, my_matrix)
0
exit
exit()
quit()
source('~/.active-rstudio-document')
m <- matrix(1:40, 5,8)
m
makeCacheMatrix(m)
x = rbind(c(1, -1/2), c(-1/3, 1))
x
x <- matrix(1:40, 5, 8)
x
m <- makeCacheMatrix(x)
m$get()
m$setinverse()
m$getinverse()
m$getinverse()
cacheSolve(m)
x <- matrix(1:25, 5, 5)
m <- makeCacheMatrix(x)
cacheSolve(m)
solve(x)
x <- matrix(1:16, 4,4)
x
solve(x)
det(x)
y <- matrix(rnorm(16),4,4)
y
det(y)
solve(y)
?solve
makeCacheMatrix(y)
source('~/.active-rstudio-document')
x <- 1:20
cachemean(x)
x <- c(1, -1/2)
x
makeVector(x)
y <- makeVector(x)
y
y$get()
y$getmean()
y$setmean()
y$set()
cachemean(y)
y$getmean()
setwd('~/Documentos/Estudos/coursera/data_science/rlanguage/ProgrammingAssignment2')
source('~/Documentos/Estudos/coursera/data_science/rlanguage/ProgrammingAssignment2/cachematrix.R')
x <- matrix(rnorm(16), 4, 4)
x
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
library(datasets)
data("iris")
?iris
data(iris)
iris
data(iris)
?iris
mean(iris$Sepal.Length)
colMeans(iris)
apply(iris[])
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
iris[, 1:4]
iris
iris[, 1:2]
iris[, 1:4]
iris[, 1:5]
iris[, 1:6]
iris[, 1:4]
?apply
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
mtcars
apply(mtcars, 2, mean)
apply(mtcars, 2, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars$cyl
?tapply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?split
split(mtcars$mpg, mtcars$cyl)
?sapply
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars[mtcars$cyl == '8'])
mtcars[mtcars$cyl == '8']
mtcars[cyl== '8']
mtcars[mtcars$cyl== '8',]
mean(mtcars[mtcars$cyl== '8',])
mean(mtcars[mtcars$cyl== '8',], $hp)
mean(mtcars[mtcars$cyl== '8',]$hp)
mean(mtcars[mtcars$cyl== '8',]$hp) - mean(mtcars[mtcars$cyl == '6']$hp)
mean(mtcars[mtcars$cyl== '8',]$hp) - mean(mtcars[mtcars$cyl == '6',]$hp)
mean(mtcars[mtcars$cyl== '8',]$hp) - mean(mtcars[mtcars$cyl == '4',]$hp)
debug(ls)
ls
ls
